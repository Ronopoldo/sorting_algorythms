async function bulkAnimateBars(indexes, speed) {
    const bars = document.querySelectorAll(".bar");
    let barsContainer = document.getElementById("bars");

    // –í—ã—á–∏—Å–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å–¥–≤–∏–≥ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
    const distance = (25 * (bars[0].offsetWidth + 2)) - (indexes[0] + 1 * (bars[0].offsetWidth + 2));

    // alert(distance)

    // –ê–Ω–∏–º–∞—Ü–∏—è
    for (let i = 0; i < 25; i++) {
        const bar = bars[i];
        let offset = 0;
        const isIndexed = indexes.includes(i);
        if (isIndexed){
            offset = distance - ((bars[0].offsetWidth + 2) * (indexes.length -2 ));
        } else {
             offset = - ((bars[0].offsetWidth + 2) * (indexes.length));
        }
        bar.style.transform = `translateX(${offset}px)`;
    }


    // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∫–∏
    await new Promise(resolve => setTimeout(resolve, speed));
    // –§–∞–∫—Ç

    for (let i = 0; i < 25; i++) {
        let bar = bars[i];
        const isIndexed = indexes.includes(i);
        if (isIndexed) {
            barsContainer.appendChild(bar);
            // console.log(barsContainer)
            bar.style.transform = ''; // –£–±–∏—Ä–∞–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é
        } else {
            bar.style.transition = 'none';
            bar.style.transform = '';
            bar.offsetHeight;
            bar.style.transition = '';
        // –ú–µ–≥–∞ –∫–æ—Å—Ç—ã–ª—å —à–æ–± –ø–æ—á–∏–Ω–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é)))) ü§´ü§´ü§´ü§´
        }


    }
}
